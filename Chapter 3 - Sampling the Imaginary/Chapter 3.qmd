---
title: "Chapter 3 - Sampling the Imaginary Notes"
format: html
---

```{python}
from fastcore import *
import numpyro
import numpyro.distributions as dist
import matplotlib.pyplot as plt
import polars as pl
from polars import col, lit
import numpy as np
from scipy.stats import gaussian_kde

import jax.numpy as jnp
from jax import random
import arviz as az

numpyro.set_platform("cpu")
```


```{python}
Pr_Positive_Vampire = 0.95
Pr_Positive_Mortal = 0.01
Pr_Vampire = 0.001
tmp = Pr_Positive_Vampire * Pr_Vampire
Pr_Positive = tmp + Pr_Positive_Mortal * (1 - Pr_Vampire)
Pr_Vampire_Positive = tmp / Pr_Positive
Pr_Vampire_Positive
```

## 3.1 Sampling from a grid-approximate posterior
```{python}
p_grid = jnp.linspace(start=0, stop=1, num=1000)
prob_p = jnp.repeat(1, 1000)
prob_data = jnp.exp(dist.Binomial(total_count=9, probs=p_grid).log_prob(6))
posterior = prob_data * prob_p
posterior = posterior / jnp.sum(posterior)
```


```{python}
samples = p_grid[dist.Categorical(probs=posterior).sample(random.PRNGKey(0), (10_000,))]
```


```{python}
fig, ax = plt.subplots()
ax.scatter(range(len(samples)), samples, alpha=0.2)
plt.show()
```

```{python}
az.plot_density({"": samples}, hdi_prob=1)
plt.show()
```


## 3.2 Sampling to summarize


### 3.2.1 Intervals of defined boundaries
```{python}
jnp.sum(posterior[p_grid < 0.5])
```

```{python}
jnp.sum(samples < 0.5) / 1e4
```

### 3.2.2 Intervals of defined mass

```{python}
jnp.quantile(samples, q=0.8)
```

```{python}
jnp.quantile(samples, q=jnp.array([0.1, 0.9]))
```

```{python}
p_grid = jnp.linspace(start=0, stop=1, num=1000)
prior = jnp.repeat(1, 1000)
```