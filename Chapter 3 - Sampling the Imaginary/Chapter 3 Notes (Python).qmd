---
title: "Untitled"
format: html
---


```{python}
import polars as pl
import pymc as pm
import matplotlib.pyplot as plt
import numpy as np
import arviz as az
from scipy import stats
from toolz import frequencies, valmap
```

```{python}
plt.style.use("bmh")
```

```{python}
Pr_Positive_Vampire = 0.95
Pr_Positive_Mortal = 0.01
Pr_Vampire = 0.001
Pr_Positive = Pr_Positive_Vampire * Pr_Vampire + Pr_Positive_Mortal * (1 - Pr_Vampire)
Pr_Vampire_Positive = Pr_Positive_Vampire * Pr_Vampire / Pr_Positive

Pr_Vampire_Positive
```

## 3.1 Sampling from a grid-approximate posterior
```{python}
p_grid = np.linspace(start=0, stop=1, num=1000)
prob_p = np.repeat(1, 1000)
prob_data = stats.binom(n=9, p=p_grid).pmf(k = 6)
posterior = prob_data * prob_p
posterior = posterior / np.sum(posterior)
```

We can use our posterior distribution to sample values of $p$. Here, each value of $p$ will appear in proportion to the posterior plausibility of each value.

```{python}
rng = np.random.default_rng()
samples = rng.choice(a=p_grid, size=10_000, replace=True, p=posterior)
```

```{python}
fig, ax = plt.subplots()
ax.scatter(np.arange(0, len(samples)), samples)
```

```{python}
fig, ax = plt.subplots()
ax.hist(samples, bins=30)
```

## 3.2 Sampling to summarize

We can use our posterior distribution to answer questions like:

* How much posterior probability lies below a parameter value?
* How much posterior probability lies between two parameter values?
* Which parameter value marks the lower 5% of the posterior probability?
* Which range of parameter values contains 90% of the posterior probability?
* Which parameter value has the highest posterior probability?

### 3.2.1 Intervals of defined boundaries

We won't be able to do below since grid approximation isn't usually practical (especially with multiple parameters). However, we can use the samples we pulled above and do the same thing.
```{python}
np.sum(posterior[p_grid < 0.5])
```

Here, we do what we did above but using samples of $p$:

16.81% posterior probability lies below $p = 0.5$.
```{python}
np.sum(samples < 0.5) / 10_000
```

```{python}
np.mean(samples < 0.5)
```

61.52% posterior probability lies between $p = 0.5 \text{ and } p = 0.75$
```{python}
np.sum((samples > 0.5) & (samples < 0.75)) / 10_000
```

```{python}
np.mean((samples > 0.5) & (samples < 0.75))
```

### 3.2.2 Intervals of defined mass

We can also get how much posterior probability is between different hypothetical values of $p$.

For instance, we see that 80% of the posterior probability lies between 0 and 0.75:


```{python}
np.quantile(samples, 0.8)
```

While the middle 80% is between 0.445 and 0.812
```{python}
np.quantile(samples, [0.1, 0.9])
```

However, this method of finding the posterior probability between two values of $p$ is not as accurate when the distribution is asymmetric. 
```{python}
p_grid = np.linspace(start=0, stop=1, num=1000)
prior = np.repeat(1, 1000)
likelihood = stats.binom(n=9, p=p_grid).pmf(k=6)
posterior = likelihood * prior
posterior = posterior / np.sum(posterior)
samples = rng.choice(a=p_grid, size=10_000, replace=True, p=posterior)
```

In those cases, we can use the **Highest Density Interval (HDI)**, which is the narrowest interval containing a certain amount of the posterior prob
```{python}
az.hdi(samples, hdi_prob=0.5)
```

```{python}
p_grid[np.argmax(posterior)]
```

```{python}
np.mean(samples)
```

```{python}
np.median(samples)
```

```{python}
np.sum(posterior * np.abs(0.5 - p_grid))
```

```{python}
loss = [np.sum(posterior * np.abs(d - p_grid))
            for d in p_grid]
```

```{python}
p_grid[np.argmin(loss)]
```

## 3.3 Sampling to simulate prediction

### 3.3.1 Dummy data
```{python}
stats.binom(n=2, p=0.7).pmf(k=np.arange(0, 4))
```

```{python}
stats.binom(n=2, p=0.7).pmf(k=1)
```

```{python}
stats.binom(n=2, p=0.7).pmf(k=10)
```

```{python}
dummy_w = stats.binom(n=2, p=0.7).rvs(size=100_000)
valmap(lambda x: x / len(dummy_w), frequencies(dummy_w))
```

```{python}
dummy_w = stats.binom(n=9, p=0.7).rvs(size=100_000)
fig, ax = plt.subplots()

ax.hist(dummy_w)
```

### 3.3.2 Model checking

#### 3.3.2.2 Is the model adequate?
```{python}
w = stats.binom(n=9, p=0.6).rvs(size=10_000)
```

```{python}
w = stats.binom(n=9, p=samples).rvs()
```

## 3.4 Summary

## 3.5 Practice

```{python}
p_grid = np.linspace(start=0, stop=1, num=1000)
prior = np.repeat(1, 1000)
likelihood = stats.binom(n=9, p=p_grid).pmf(k=6)
posterior = prior * likelihood
posterior = posterior / np.sum(posterior)
```

```{python}
rng = np.random.default_rng()
samples = rng.choice(a=p_grid, size=10_000, replace=True, p=posterior)
```

### 3E1
How much posterior probability lies below $p = 0.2$?

```{python}
np.mean(samples < 0.2)
```

### 3E2
How much posterior probability lies below $p = 0.8$?

```{python}
np.mean(samples < 0.8)
```

### 3E3
How much posterior probability lies between $p = 0.2$ and $p = 
```{python}
np.mean((samples > 0.2) & (samples < 0.8))
```

### 3E4
20% of the posterior probability lies below which value of $p$?
```{python}
np.quantile(samples, 0.2)
```

### 3E5
20% of the posterior probability lies above which value of $p$?

```{python}
np.quantile(samples, 0.8)
```

### 3E6
Which values of $p$ contain the narrowest interval equal to 66% of the posterior probability?
```{python}
az.hdi(samples, hdi_prob=0.66)
```

### 3E7
Which values of $p$ contain 66% of the posterior probability, assuming equal posterior probability both below and above the interval?
```{python}
# TODO: Find a percentile interval function
```

### 3M1
Suppose the globe tossing data had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as before.

```{python}
p_grid = np.linspace(start=0, stop=1, num=1000)
prior = np.repeat(1, 1000)
likelihood = stats.binom(n=15, p=p_grid).pmf(k=8)
posterior = prior * likelihood
posterior = posterior / np.sum(posterior)
```

### 3M2
Draw 10,000 samples from the grid approximation from above. Then use the samples to calculate the 90% HPDI for $p$.
```{python}
samples = rng.choice(a=p_grid, size=10_000, p=posterior, replace=True)
az.hdi(samples, hdi_prob=0.9)
```

### 3M3
Construct a posterior predictive check for this model and data. This means simulate the distribution of samples, averaging over the posterior uncertainty in $p$. What is the probability of observing 8 water in 15 tosses?

```{python}
w = stats.binom(n=15, p=samples).rvs()
np.mean(w == 8)
```

```{python}
valmap(lambda x: x / len(w), frequencies(w))
```

### 3M4
Using the posterior distribution constructed from the new (8/15) data, now calculate the probability of observing 6 water in 9 tosses.

```{python}
prior = posterior
likelihood = stats.binom(n=9, p=p_grid).pmf(k=6)
posterior = prior * likelihood
posterior = posterior / np.sum(posterior)
```

### 3M5
Start over at 3M1, but now use a prior that is zero below $p = 0.5$ and a constant above $p = 0.5$. This corresponds to prior information that a majority of the Earth's surface is water. Repeat each problem above and compare the inferences. What difference does the better prior make? If it helps, compare inferences (using both priors) to the true value $p = 0.7$.

```{python}
p_grid = np.linspace(start=0, stop=1, num=1000)
prior = np.where(p_grid < 0.5, 0, 1)
likelihood = stats.binom(n=15, p=p_grid).pmf(k=8)
posterior = prior * likelihood
posterior = posterior / np.sum(posterior)
```

```{python}
samples = rng.choice(a=p_grid, size=10_000, p=posterior, replace=True)
az.hdi(samples, hdi_prob=0.9)
```

```{python}
w = stats.binom(n=15, p=samples).rvs()
np.mean(w == 8)
```

```{python}
valmap(lambda x: x / len(w), frequencies(w))
```

```{python}
prior = posterior
likelihood = stats.binom(n=9, p=p_grid).pmf(k=6)
posterior = prior * likelihood
posterior = posterior / np.sum(posterior)
```

```{python}
samples = rng.choice(a=p_grid, size=10_000, p=posterior, replace=True)
az.hdi(samples, hdi_prob=0.9)
```

```{python}
w = stats.binom(n=9, p=samples).rvs()
np.mean(w == 8)
```

```{python}
valmap(lambda x: x / len(w), frequencies(w))
```

### 3M6
Suppose you want to estimate the Earth's proportion of water very precisely. Specifically, you want the 99% percentile interval of the posterior distribution of $p$ to be only 0.05 wide. This means the distance between the upper and lower bound of the interval should be 0.05. How many times will you have to toss the globe to do this?

```{python}
p_grid = np.linspace(start=0, stop=1, num=1000)
prior = np.repeat(1, 1000)

PI_width = 0
tosses = 0
w = 0

while PI_width != 0.05:
    outcome = stats.binom(n=1, p=0.7).rvs()
    tosses += 1

    if outcome == 1:
        w += 1

    likelihood = stats.binom(n=tosses, p=p_grid).pmf(k=w)
    posterior = prior * likelihood
    posterior = posterior / np.sum(posterior)
    samples = rng.choice(a=p_grid, size=10_000, p=posterior, replace=True)
    PI_width = np.round(np.diff(az.hdi(samples, hdi_prob=0.99)), 2)
    prior = posterior
```

## Hard

### 3H1

### 3H2

### 3H3

### 3H4

### 3H5