---
title: "Chapter 5 - The Many Variables and Spurious Waffles"
format: html
---


```{r}
library(rethinking)
library(tidyverse)
library(tidybayes)
library(cmdstanr)
library(posterior)
library(dagitty)
library(bayestestR)

theme_set(theme_minimal())
```

## 5.1 Spurious association
```{r}
data(WaffleDivorce)

d <- WaffleDivorce |>
    mutate(
        D = standardize(Divorce),
        A = standardize(MedianAgeMarriage),
        M = standardize(Marriage)
    )
```

```{r}
m5_1_model <- cmdstan_model("stan_models/m5_1.stan")
m5_1_fit <- m5_1_model$sample(
    data = list(
        N = nrow(d),
        median_age_marriage = d$A,
        divorce_rate = d$D
    ),
    parallel_chains = 4
)
```

```{r}
m5_1_draws <- as_draws_df(m5_1_fit)
```

```{r}
mu_prior_draws <- m5_1_draws |>
    select(starts_with("mu_prior")) |>
    mutate(draw = row_number()) |>
    slice_sample(n = 50) |>
    pivot_longer(cols = starts_with("mu_prior"))
```

```{r}
ggplot() +
    purrr::map(
        unique(mu_prior_draws$draw),
        \(x) geom_line(data = mu_prior_draws |> filter(draw == x), aes(x = d$A, y = value), 
                       color = "black", alpha = 0.4)
    ) +
    labs(x = "Median age marriage (std)", y = "Divorce rate (std)") +
    coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2))
```

```{r}
mu_posterior_draws <- m5_1_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_posterior_draws, mean)
mu_cis <- purrr::map(mu_posterior_draws, hdi) |> list_rbind()
```

```{r}
ggplot() +
    geom_point(data = d, aes(x = A, y = D)) +
    geom_line(aes(x = d$A, mu_means)) +
    geom_ribbon(data = mu_cis, 
                aes(x = d$A, y = mu_means, ymin = CI_low, ymax = CI_high), 
                alpha = 0.4,
                fill = "orange") +
    labs(x = "Median age at marriage (std)", y = "Divorce rate (std)") +
    coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2))
```

```{r}
m5_2_model <- cmdstan_model("stan_models/m5_2.stan")
m5_2_fit <- m5_2_model$sample(
    data = list(
        marriage_rate = d$M,
        divorce_rate = d$D,
        N = nrow(d)
    ),
    parallel_chains = 4
)

m5_2_draws <- as_draws_df(m5_2_fit)
mu_posterior_draws <- m5_2_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_posterior_draws, mean)
mu_cis <- purrr::map(mu_posterior_draws, bayestestR::hdi) |> list_rbind()
```

```{r}
d |>
    ggplot() +
    geom_point(aes(x = M, y = D)) +
    geom_line(aes(x = M, y = mu_means)) +
    geom_ribbon(data = mu_cis, aes(x = d$M, y = mu_means, ymin = CI_low, ymax = CI_high),
                alpha = 0.4, fill = "orange") +
    labs(x = "Marriage rate (std)", y = "Divorce rate (std)") +
    coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2))
```
### 5.1.1 Think before you regress
```{r}
dag5_1 <- dagitty("dag{ A -> D; A -> M; M -> D }")
coordinates(dag5_1) <- list(x = c(A = 0, D = 1, M = 2), y = c(A = 0, D = 1, M = 0))
drawdag(dag5_1)
```

### 5.1.2 Testable implications
```{r}
DMA_dag2 <- dagitty("dag{ D <- A -> M }")
impliedConditionalIndependencies(DMA_dag2)
```

```{r}
DMA_dag1 <- dagitty("dag{ D <- A -> M -> D }")
impliedConditionalIndependencies(DMA_dag1)
```

### 5.1.3 Multiple regression notation

### 5.1.4 Approximating the posterior
```{r}
m5_3_model <- cmdstan_model("stan_models/m5_3.stan")
m5_3_fit <- m5_3_model$sample(
    data = list(
        N = nrow(d),
        marriage_rate = d$M,
        median_age_at_marriage = d$A,
        divorce_rate = d$D
    ),
    parallel_chains = 4
)
```

```{r}
model_estimates <- purrr::map(list(m5_1 = m5_1_fit, m5_2 = m5_2_fit, m5_3 = m5_3_fit), summarize_draws) |>
    bind_rows(.id = "model_name") |>
    filter(variable %in% c("bA", "bM"))

model_estimates |>
    ggplot() +
    aes(x = mean, y = model_name, group = variable) +
    geom_pointrange(aes(xmin = q5, xmax = q95)) +
    facet_wrap(~ variable, ncol = 1) +
    labs(x = "Estimate", y = NULL)
```

### 5.1.5 Plotting multivariate posteriors

#### 5.1.5.1 Predictor residual plots
```{r}
m5_4_model <- cmdstan_model("stan_models/m5_4.stan")
m5_4_fit <- m5_4_model$sample(
    data = list(
        N = nrow(d),
        median_age_at_marriage = d$A,
        marriage_rate = d$M
    ),
    parallel_chains = 4
)
```

```{r}
m5_4_draws <- as_draws_df(m5_4_fit)
mu_draws <- m5_4_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_draws, mean)
mu_resid <- d$M - mu_means

d |>
    ggplot() +
    geom_point(aes(x = A, y = M)) +
    geom_line(aes(x = A, y = mu_means)) +
    geom_segment(aes(x = A, y = M, xend = A, yend = mu_means)) +
    labs(x = "Age at marriage (std)", y = "Marriage rate (std)")
```

```{r}
d |>
    ggplot() +
    geom_point(aes(x = mu_resid, y = D)) +
    geom_smooth(aes(x = mu_resid, y = D), method = "lm", fullrange = TRUE, alpha = 0.25, fill = "orange", color = "black") +
    geom_vline(xintercept = 0, linetype = "dashed") +
    labs(x = "Marraige rate residuals", y = "Divorce rate (std)")
```

```{r}
m5_4b_model <- cmdstan_model("stan_models/m5_4b.stan")
m5_4b_fit <- m5_4b_model$sample(
    data = list(
        N = nrow(d),
        median_age_at_marriage = d$A,
        marriage_rate = d$M
    ),
    parallel_chains = 4
)
```

```{r}
m5_4b_draws <- as_draws_df(m5_4b_fit)
mu_draws <- m5_4b_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_draws, mean)
mu_cis <- purrr::map(mu_draws, bayestestR::hdi) |> list_rbind()

d |>
    ggplot() +
    geom_point(aes(x = M, y = A)) +
    geom_line(aes(x = M, y = mu_means)) +
    geom_segment(aes(x = M, y = A, xend = M, yend = mu_means)) +
    labs(x = "Marriage rate (std)", y = "Age at marriage (std)")
```

```{r}
mu_resid <- d$A - mu_means

d |>
    ggplot() +
    geom_point(aes(x = mu_resid, y = D)) +
    geom_smooth(aes(x = mu_resid, y = D), method = "lm", fullrange = TRUE, fill = "orange", color = "black") +
    geom_vline(xintercept = 0, linetype = "dashed") +
    labs(x = "Median age at marriage residuals", y = "Divorce rate (std)")
```

#### 5.1.5.2 Posterior prediction plots

```{r}
m5_3_draws <- as_draws_df(m5_3_fit)
mu_draws <- m5_3_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_draws, mean)
mu_cis <- purrr::map(mu_draws, bayestestR::hdi) |> list_rbind()

d |>
    ggplot() +
    geom_point(aes(x = D, y = mu_means)) +
    geom_abline(linetype = "dashed", color = "grey50") +
    geom_linerange(aes(x = D, y = mu_means, ymin = mu_cis$CI_low, ymax = mu_cis$CI_high)) +
    labs(x = "Observed divorce", y = "Predicted divorce")
```

#### 5.1.5.3 Counterfactual plots
```{r}
m5_3A_model <- cmdstan_model("stan_models/m5_3A.stan")
m5_3A_fit <- m5_3A_model$sample(
    data = list(
        N = nrow(d),
        marriage_rate = d$M,
        median_age_at_marriage = d$A,
        divorce_rate = d$D
    ),
    parallel_chains = 4
)
```

```{r}
m5_3A_draws <- as_draws_df(m5_3A_fit)
post_pred_dist <- m5_3A_draws |> select(matches("divorce_rep|marriage_rep"))

divorce_post_pred_dist <- m5_3A_draws |> select(starts_with("divorce_rep"))
divorce_means <- map_dbl(divorce_post_pred_dist, mean)
divorce_cis <- purrr::map(divorce_post_pred_dist, bayestestR::hdi) |> list_rbind()

marriage_post_pred_dist <- m5_3A_draws |> select(starts_with("marriage_rep"))
marriage_means <- map_dbl(marriage_post_pred_dist, mean)
marriage_cis <- purrr::map(marriage_post_pred_dist, bayestestR::hdi) |> list_rbind()
```

```{r}
d |>
    ggplot() +
    geom_line(aes(x = A, y = divorce_means)) +
    geom_ribbon(aes(x = A, y = divorce_means, ymin = divorce_cis$CI_low, ymax = divorce_cis$CI_high), alpha = 0.25, fill = "orange") +
    labs(
        x = "Manipulated A",
        y = "Manipulated D",
        title = "Total counterfactual effect of A on D"
    )
```

```{r}
d |>
    ggplot() +
    geom_line(aes(x = A, y = marriage_means)) +
    geom_ribbon(aes(x = A, y = marriage_means, ymin = marriage_cis$CI_low, ymax = marriage_cis$CI_high),
                alpha = 0.25, fill = "orange") +
    labs(
        x = "Manipulated A",
        y = "Manipulated M",
        title = "Total counterfactual effect of A on M"
    )
```

```{r}
marriage_rate <- seq(from = -2, to = 2, length.out = 50)

m5_3A_counterfact_M_model <- cmdstan_model("stan_models/m5_3A.stan")
m5_3A_counterfact_M_fit <- m5_3A_counterfact_M_model$sample(
    data = list(
        N = nrow(d),
        marriage_rate = marriage_rate,
        divorce_rate = d$D,
        median_age_at_marriage = rep(0, 50)
    ),
    parallel_chains = 4
)
```

```{r}
m5_3A_counterfactual_draws <- as_draws_df(m5_3A_counterfact_M_fit)
divorce_post_pred_dist <- m5_3A_counterfactual_draws |> select(starts_with("divorce_rep"))

divorce_means <- map_dbl(divorce_post_pred_dist, mean)
divorce_cis <- purrr::map(divorce_post_pred_dist, hdi) |> list_rbind()
divorce_summary <- tibble(M = marriage_rate, divorce_means = divorce_means) |> bind_cols(divorce_cis)
```

```{r}
divorce_summary |>
    ggplot() +
    geom_line(aes(x = M, y = divorce_means)) +
    geom_ribbon(aes(x = M, y = divorce_means, ymin = CI_low, ymax = CI_high), alpha = 0.25, fill = "orange") +
    coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
    labs(
        x = "Manipulated M",
        y = "Counterfactual D",
        title = "Total conterfactual effect of M on D"
    )
```
## 5.2 Masked relationship
```{r}
data(milk)

d <- milk
str(d)

d <- d |> 
  mutate(
    K = standardize(kcal.per.g),
    N = standardize(neocortex.perc),
    M = standardize(mass)
  )
```

```{r}
m5_5_draft_model <- cmdstan_model("stan_models/m5_5_draft.stan")
m5_5_draft_fit <- m5_5_draft_model$sample(
  data = list(
    N = nrow(d),
    neo_cortex_perc = d$N,
    kcal_per_g = d$K
  )
)
```
```{r}
dcc <- d |> drop_na(K, N, M)
```

```{r}
m5_5_draft_fit <- m5_5_draft_model$sample(
  data = list(
    N = nrow(dcc),
    neo_cortex_perc = dcc$N,
    kcal_per_g = dcc$K
  )
)
```

```{r}
x_seq <- seq(-2, 2, length.out = nrow(dcc))

m5_5_draft_fit <- m5_5_draft_model$sample(
  data = list(
    N = nrow(dcc),
    neo_cortex_perc = x_seq,
    kcal_per_g = dcc$K
  ),
  parallel_chains = 4
)
```

```{r}
prior_draws <- as_draws_df(m5_5_draft_fit) |> 
  select(starts_with("mu_prior")) |> 
  mutate(draw = row_number()) |>
  slice_sample(n = 50) |> 
  pivot_longer(cols = starts_with("mu_prior"))
```

```{r}
neocortex_pct <- tibble(N = x_seq)

ggplot() +
  map(unique(prior_draws$draw), 
      \(x) geom_line(data = prior_draws |> filter(draw == x), aes(x = neocortex_pct$N, y = value))) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  labs(
    x = "Neocortext percent (std)",
    y = "kilocal per gram (std)",
    title = "a ~ dnorm(0, 1) \n bN ~ dnorm(0, 1)"
  )
```
```{r}
m5_5_model <- cmdstan_model("stan_models/m5_5.stan")
m5_5_fit <- m5_5_model$sample(
  data = list(
    N = nrow(dcc),
    neocortex_pct = x_seq,
    kcal_per_g = dcc$K
  )
)
```

```{r}
prior_draws <- as_draws_df(m5_5_fit) |> 
  select(starts_with("mu_prior")) |> 
  mutate(draw = row_number()) |> 
  slice_sample(n = 50) |> 
  pivot_longer(cols = starts_with("mu_prior"))
```

```{r}
ggplot() +
  map(
    unique(prior_draws$draw),
    \(x) geom_line(data = prior_draws |> filter(draw == x), aes(x = x_seq, y = value))
  ) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  labs(
    x = "Neocortext percent (std)",
    y = "Kilocal per gram (std)",
    title = "a ~ dnorm(0, 0.2) \n bN ~ dnorm(0, 0.5)"
  )
```

```{r}
x_seq <- seq(min(dcc$N) - 0.15, max(dcc$N) + 0.15, length.out = nrow(dcc))
m5_5_fit <- m5_5_model$sample(
  data = list(
    N = nrow(dcc),
    neocortex_pct = x_seq,
    kcal_per_g = dcc$K
  ),
  parallel_chains = 4
)
```

```{r}
m5_5_draws <- as_draws_df(m5_5_fit)
mu_draws <- m5_5_draws <- m5_5_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_draws, mean)
mu_cis <- map(mu_draws, hdi) |> list_rbind()

neocortex_data <- tibble(
  neocortex_pct = x_seq,
  mu = mu_means
) |> 
  bind_cols(mu_cis)
```

```{r}
dcc |> 
  ggplot() +
  geom_point(aes(x = N, y = K)) +
  geom_line(data = neocortex_data, aes(x = neocortex_pct, y = mu)) +
  geom_ribbon(data = neocortex_data, aes(x = neocortex_pct, y = mu, ymin = CI_low, ymax = CI_high),
              fill = "orange", alpha = 0.25) +
  coord_cartesian(xlim = c(-2, 1.5), ylim = c(-2, 2)) +
  labs(x = "neocortext percent (std)",
       y = "kilocal per gram (std)")
```

```{r}
m5_6_model <- cmdstan_model("stan_models/m5_6.stan")
m5_6_fit <- m5_6_model$sample(
  data = list(
    N = nrow(dcc),
    kcal_per_g = dcc$K,
    body_mass = dcc$M
  ),
  parallel_chains = 4
)
```

```{r}
m5_6_draws <- as_draws_df(m5_6_fit)
mu_draws <- m5_6_draws |> select(matches("^mu\\["))
mu_means <- map_dbl(mu_draws, mean)
mu_cis <- map(mu_draws, hdi) |> list_rbind()

m5_6_data <- tibble(mu = mu_means) |> bind_cols(mu_cis)
```

```{r}
dcc |> 
  ggplot() +
  geom_point(aes(x = M, y = K)) +
  geom_line(data = m5_6_data, aes(x = dcc$M, y = mu)) +
  geom_ribbon(data = m5_6_data, aes(x = dcc$M, y = mu, ymin = CI_low, ymax = CI_high),
              alpha = 0.25,
              fill = "orange") +
  labs(
    x = "Log body mass (std)",
    y = "Kcal per gram (std)"
  )
```

```{r}
m5_7_model <- cmdstan_model("stan_models/m5_7.stan")
m5_7_fit <- m5_7_model$sample(
  data = list(
    N = nrow(dcc),
    kcal_per_g = dcc$K,
    neocortex_pct = dcc$N,
    body_mass = dcc$M
  ),
  parallel_chains = 4
)
```


```{r}
m5_model_summaries <- 
  map(list(m5_5 = m5_5_fit, m5_6 = m5_6_fit, m5_7 = m5_7_fit), summarize_draws) |> 
  bind_rows(.id = "model_name") |> 
  filter(variable %in% c("bN", "bM"))

m5_model_summaries |> 
  ggplot() +
  geom_pointrange(aes(x = mean, y = model_name, xmin = q5, xmax = q95)) +
  facet_wrap(~variable, ncol = 1) +
  coord_cartesian(xlim = c(-2, 2)) +
  labs(x = "Estimate", y = NULL)
```


## 5.3 Categorical variables
```{r}
data("Howell1")
d <- Howell1
str(d)
```

```{r}
mu_female <- rnorm(1e4, 178, 20)
mu_male <- rnorm(1e4, 178, 20) + rnorm(1e4, 0, 10)
precis(data.frame(mu_female, mu_male))
```

```{r}
d <- d |> mutate(sex = if_else(male == 1, 2, 1))
str(d$sex)
```

```{r}
m5_8_model <- cmdstan_model("stan_models/m5_8.stan")
m5_8_fit <- m5_8_model$sample(
  data = list(
    N = nrow(d),
    S = length(unique(d$sex)),
    sex = d$sex,
    height = d$height
  ),
  parallel_chains = 4
)
```


```{r}
m5_8_draws <- as_draws_df(m5_8_fit)
m5_8_draws <- m5_8_draws |> 
  mutate(diff_fm = `a[1]` - `a[2]`)

map_dbl(m5_8_draws |> select(`a[1]`, `a[2]`, sigma, diff_fm), mean)
```

```{r}
data(milk)
d <- milk
levels(d$clade)

d <- d |> 
  mutate(clade_id = as.integer(clade),
         K = standardize(kcal.per.g))
```

```{r}
m5_9_model <- cmdstan_model("stan_models/m5_9.stan")
m5_9_fit <- m5_9_model$sample(
  data = list(
    N = nrow(d),
    ID = length(unique(d$clade_id)),
    clade_id = d$clade_id,
    kcal_per_g = d$K
  ),
  parallel_chains = 4
)
```

```{r}
m5_9_summary <- summarize_draws(m5_9_fit)

m5_9_summary |> 
  filter(str_detect(variable, "a\\[")) |> 
  mutate(variable = str_c(variable, ":", levels(d$clade))) |> 
  ggplot() +
  geom_pointrange(aes(x = mean, y = variable, xmin = q5, xmax = q95)) +
  labs(x = "Expected kcal (std)", y = NULL)
```

```{r}
d <- d |> mutate(house = sample(rep(1:4, each = 8), size = nrow(d)))
```

```{r}
m5_10_model <- cmdstan_model("stan_models/m5_10.stan")
m5_10_fit <- m5_10_model$sample(
  data = list(
    N = nrow(d),
    id_idx = length(unique(d$clade_id)),
    house_idx = length(unique(d$house)),
    clade_id = d$clade_id,
    house = d$house,
    kcal_per_g = d$K
  ),
  parallel_chains = 4
)
```

## 5.5 Practice

### 5E1
**Which of the linear models below are multiple regressions?**

1. $\mu_i = \alpha + \beta x_i$
2. $\mu_i = \beta_x x_i + \beta_z z_i$
3. $\mu_i = \alpha + \beta(x_i - z_i)$
4. $\mu_i = \alpha + \beta_x + x_i + \beta_z + z_i$

Regressions 2 and 4 are multiple regressions.

### 5E2
**Write down a multiple regression to evaluate the claim:** *Animal diversity is linearly related to latitude, but only after controlling for plant diversity.* **You just need to write down the model definition.**

$$\text{Animal diversity} \sim \alpha + \beta_1 \text{Latitude} + \beta_2 \text{Plant diversity}$$
### 5E3
**Write down a multiple regression to evaluate the claim:** *Neither amount of funding nor size of laboratory is by itself a good predictor of time to PhD degree; but together these variables are both positively associated with time to degree.* **Write down the model definition and indicate which side of zero each slope parameter should be on.**

$$\text{Time to PhD} \sim \alpha + \beta_1 \text{Funding} + \beta_2 \text{Laboratory size}$$

Since both variables are positively associated with time to degree, this means that each slope parameter will be on the positive side.

### 5E4
**Suppose you have a single categorical predictor with 4 levels (unique values), labeled A, B, C, and D. Let** $A_i$ **be an indicator variable that is 1 where case** $i$ **is in category A. Also, suppose** $B_i$, $C_i$, **and** $D_i$ **for the other categories. Now which of the following linear models are inferentially equivalent ways to include the categorical variable in a regression? Models are inferentially equivalent when its possible to compute one posterior distribution from the posterior distribution of another model.**

1. $\mu_i \alpha + \beta_A A_i + \beta_B B_i + \beta_D D_i$
2. $\mu_i \alpha + \beta_A A_i + \beta_B B_i + \beta_C C_i + \beta_D D_i$
3. $\mu_i \alpha + \beta_B B_i + \beta_C C_i + \beta_D D_i$
4. $\mu_i \alpha_A A_i + \alpha_B B_i \alpha_C C_i + \alpha_D D_i$
5. $\mu_i \alpha_A(1 - B_i - C_i - D_i) + \alpha_B B_i + \alpha_C C_i + \alpha_D D_i$

Regression models 4 and 5 are inferentially equivalent ways to include the categorical variable.

### 5M1
**Invent your own example of a spurious correlation. An outcome variable should be correlated with both predictor variables. But when both predictors are entered in the same model, the correlation between the outcome and one of the predictors should mostly vanish (or at least be greatly reduced).**

